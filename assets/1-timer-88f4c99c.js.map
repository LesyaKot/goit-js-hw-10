{"version":3,"file":"1-timer-88f4c99c.js","sources":["../../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst timerDisplay = document.querySelector('.timer');\nconst dateInput = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector('button');\n\nstartBtn.disabled = true;\n\nlet userSelectedDate;\nlet timerInterval;\nlet timerStarted = false;\n\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n\n    console.log(selectedDates[0]);\n\n    userSelectedDate = selectedDates[0];\n    let currentDate = new Date();\n    if (userSelectedDate >= currentDate) {\n      startBtn.disabled = false;\n    } else {\n      iziToast.error({\n        title: 'alert',\n        message: 'Please choose a date in the future',\n      });\n      startBtn.disabled = true;\n\n  }\n}\n}\nflatpickr(dateInput, options) \n \n\nstartBtn.addEventListener('click', () => {\n  if (!timerStarted) {\n    timerInterval = setInterval(updateTimer, 1000);\n    timerStarted = true;\n    startBtn.disabled = true;\n    dateInput.disabled = true;\n  }\n});\n\nfunction updateTimer() {\n  let currentTime = Date.now();\n  let delta = userSelectedDate - currentTime;\n\n  if (delta <= 0) {\n    clearInterval(timerInterval);\n    timerDisplay.innerText = '00:00:00:00';\n    timerStarted = false;\n    startBtn.disabled = false;\n    dateInput.disabled = false;\n    return;\n  }\n\n  const { days, hours, minutes, seconds } = convertMs(delta);\n  const formattedTime = `${addLeadingZero(days)}:${addLeadingZero(\n    hours\n  )}:${addLeadingZero(minutes)}:${addLeadingZero(seconds)}`;\n\n  timerDisplay.innerText = formattedTime;\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  ms %= day;\n  const hours = Math.floor(ms / hour);\n  ms %= hour;\n  const minutes = Math.floor(ms / minute);\n  ms %= minute;\n  const seconds = Math.floor(ms / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["timerDisplay","dateInput","startBtn","userSelectedDate","timerInterval","timerStarted","options","selectedDates","iziToast","flatpickr","updateTimer","currentTime","delta","days","hours","minutes","seconds","convertMs","formattedTime","addLeadingZero","ms","value"],"mappings":"gDAKA,MAAMA,EAAe,SAAS,cAAc,QAAQ,EAC9CC,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAW,SAAS,cAAc,QAAQ,EAEhDA,EAAS,SAAW,GAEpB,IAAIC,EACAC,EACAC,EAAe,GAGnB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAErB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAE5BJ,EAAmBI,EAAc,CAAC,EAE9BJ,GADc,IAAI,KAEpBD,EAAS,SAAW,IAEpBM,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDN,EAAS,SAAW,GAG1B,CACA,EACAO,EAAUR,EAAWK,CAAO,EAG5BJ,EAAS,iBAAiB,QAAS,IAAM,CAClCG,IACHD,EAAgB,YAAYM,EAAa,GAAI,EAC7CL,EAAe,GACfH,EAAS,SAAW,GACpBD,EAAU,SAAW,GAEzB,CAAC,EAED,SAASS,GAAc,CACrB,IAAIC,EAAc,KAAK,MACnBC,EAAQT,EAAmBQ,EAE/B,GAAIC,GAAS,EAAG,CACd,cAAcR,CAAa,EAC3BJ,EAAa,UAAY,cACzBK,EAAe,GACfH,EAAS,SAAW,GACpBD,EAAU,SAAW,GACrB,MACD,CAED,KAAM,CAAE,KAAAY,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAK,EACnDM,EAAgB,GAAGC,EAAeN,CAAI,CAAC,IAAIM,EAC/CL,CACJ,CAAG,IAAIK,EAAeJ,CAAO,CAAC,IAAII,EAAeH,CAAO,CAAC,GAEvDhB,EAAa,UAAYkB,CAC3B,CAEA,SAASD,EAAUG,EAAI,CAMrB,MAAMP,EAAO,KAAK,MAAMO,EAAK,KAAG,EAChCA,GAAM,MACN,MAAMN,EAAQ,KAAK,MAAMM,EAAK,IAAI,EAClCA,GAAM,KACN,MAAML,EAAU,KAAK,MAAMK,EAAK,GAAM,EACtCA,GAAM,IACN,MAAMJ,EAAU,KAAK,MAAMI,EAAK,GAAM,EAEtC,MAAO,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASG,EAAeE,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}